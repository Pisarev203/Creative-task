
Задача: Определение победителя теста по Python с сортировкой результатов
Егор участвовал в тестировании по Python и хочет узнать, является ли его результат лучшим в группе. Кроме этого, он хочет увидеть список всех участников с их баллами, отсортированный в порядке возрастания баллов.
Напишите программу, которая поможет Егору определить, занял ли он первое место, и выведет упорядоченные результаты.
Входные данные
Каждая строка содержит информацию об одном участнике в следующем формате:
<Фамилия> <Количество_баллов>
 • <Фамилия> — фамилия участника (строка).
 • <Количество_баллов> — итоговый балл участника (целое число).
Выходные данные
 1. Выведите YES, если Егор набрал наибольшее количество баллов в группе, или NO, если кто-то набрал больше.
 2. Затем выведите список участников и их баллы, отсортированный в порядке возрастания баллов.

Решение
python
def analyze_test_results(input_data):
    scores = []
    egor_score = -1

    # Обработка входных данных
    for line in input_data:
        name, score = line.split()
        score = int(score)
        scores.append((name, score))
        if name == "Егор":
            egor_score = score

    # Сортировка по возрастанию баллов
    scores.sort(key=lambda x: x[1])

    # Проверка, является ли Егор лучшим
    max_score = max(scores, key=lambda x: x[1])[1]
    is_egor_top = "YES" if egor_score == max_score else "NO"

    # Вывод результата
    print(is_egor_top)
    for name, score in scores:
        print(name, score)

# Пример использования
input_data = [
    "Егор 85",
    "Петя 90",
    "Саша 78",
    "Коля 85"
]
analyze_test_results(input_data)

Примеры
Пример 1
Входные данные:

Егор 85
Петя 90
Саша 78
Коля 85
Вывод:
objective 

NO
Саша 78
Егор 85
Коля 85
Петя 90
Пример 2
Входные данны
Егор 90
Петя 70
Саша 89
Коля 10
Вывод:
objectivec

YES
Коля 10
Петя 70
Саша 89
Егор 90
















### Задача: Поиск и подчеркивание ключевого слова в текстах  

Напишите программу, которая принимает два текста и одно ключевое слово. Программа должна:  
1. Вывести оба текста с подчеркнутыми (в виде `**ключевое слово**`) вхождениями ключевого слова.  
2. Если в тексте ключевое слово не найдено, вывести вместо текста строку: `НЕТУ`.  

---

#### Входные данные  
1. Первый текст.  
2. Второй текст.  
3. Ключевое слово (строка).  

#### Выходные данные  
1. Первый текст с подчеркнутым ключевым словом или НЕТУ, если слово отсутствует.  
2. Второй текст с подчеркнутым ключевым словом или НЕТУ, если слово отсутствует.  

---
```python
def highlight_keyword(text1, text2, keyword):
    def process_text(text, keyword):
        # Проверяем, есть ли ключевое слово в тексте
        if keyword in text:
            # Подчеркиваем все вхождения ключевого слова
            highlighted_text = text.replace(keyword, f"**{keyword}**")
            return highlighted_text
        else:
            return "НЕТУ"

    # Обрабатываем оба текста
    result1 = process_text(text1, keyword)
    result2 = process_text(text2, keyword)

    # Вывод результатов
    print(result1)
    print(result2)

# Пример использования
text1 = input("Введите первый текст: ")
text2 = input("Введите второй текст: ")
keyword = input("Введите ключевое слово: ")

highlight_keyword(text1, text2, keyword)

---
Примеры
Пример 1
Входные данные:

Первый текст: В лесу родилась елочка.  
Второй текст: Елочка росла в лесу.  
Ключевое слово: елочка  
Вывод:


В лесу родилась **елочка**. 
**елочка ** росла в лесу.  
Пример 2
Входные данные:

Первый текст: В лесу родилась елочка.  
Второй текст: Елочка росла в лесу.  
Ключевое слово: снежинка  
Вывод:


НЕТУ  
НЕТУ  
Пример 3
Входные данные:

Первый текст: В лесу была тишина.  
Второй текст: Тишина окружала весь лес.  
Ключевое слово: лес  
Вывод:


В: снежинкабыла тишина.  
Тишина окружала весь **лес**.
